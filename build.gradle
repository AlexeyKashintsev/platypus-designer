import java.util.jar.Manifest
import java.util.jar.Attributes

version = '5.11.0'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "cz.kubacki.gradle.plugins:gradle-nbm-plugin:1.16.0"
        gradleApi()
    }
}

task clean(type: Delete){
    delete 'build'
}

subprojects{
    apply plugin: 'java'
    apply plugin: 'cz.kubacki.nbm'

    configurations {
        compile.transitive = false
        compileClasspath.transitive = false
        compileOnly.transitive = false
        providedCompile.transitive = false
    }    
    
    dependencies {
        testCompile 'junit:junit:4.11'
    }
    
    nbm {
        keyStore {
            keyStoreFile = file('sign')
            username = 'altsoft'
            password = 'altsoftsign'
        }
        homePage = 'http://platypus-platform.org'
        licenseFile = 'license'
        moduleAuthor = 'Marat F. Gainullin'
        needsRestart = true
    }
    
    repositories {
        maven {
            url 'http://download.osgeo.org/webdav/geotools/'
        }
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://bits.netbeans.org/maven2/'
        }
        maven {
            url 'http://www.datanucleus.org/downloads/maven2/'
        }
    }

    compileJava{
        options.compilerArgs = ['-sourcepath', "${project.projectDir}/src/main/resources"]
    }

    task filterManifest() {
        doFirst {
            def manifestFile = generateModuleManifest.getGeneratedManifestFile()
            def manifest = manifestFile.withInputStream {
                def toRead = new Manifest()
                toRead.read it
                return toRead
            }
            if(project == project(':platypus-js-nb')){
                manifest.getMainAttributes().put(new Attributes.Name("OpenIDE-Module-Public-Packages"), 'javax.**, com.**, org.**, net.**, oracle.**')
            } else{
                manifest.getMainAttributes().remove(new Attributes.Name("Class-Path"))
            }
            manifestFile.withOutputStream {
                manifest.write it
            }
        }
    }
    filterManifest.dependsOn(generateModuleManifest)
    jar.dependsOn(filterManifest)
    
    task suite(type: Copy){
        from "build/module"
        into "${parent.buildDir}/platypus"
    }
    suite.dependsOn netbeans
    
    task nbms(type: Copy){
        from "build/nbm"
        into "${parent.buildDir}/nbms"
    }
    nbms.dependsOn 'nbm'
}

task netBeansRun(type: Exec) {
    def win = System.getProperty('os.name').toLowerCase().contains('windows')
    def executable = win ? 'netbeans.exe' : 'netbeans'
    doFirst {
        def confFile = project.file("${project.buildDir}${File.separator}testuserdir${File.separator}etc${File.separator}netbeans.conf")
        confFile.parentFile.mkdirs()
        confFile.write "netbeans_extraclusters=\"${project.buildDir}${File.separator}platypus\""
    }
    workingDir "${project.buildDir}"
    if (project.hasProperty('netBeansInstallDir')) {
        executable = "${netBeansInstallDir}${File.separator}bin${File.separator}${executable}"
    } else {
        logger.warn('netBeansInstallDir property is not specified. Assuming \'netbeans\' executable is on PATH.')
    }
    def userDir = "\"${project.buildDir}${File.separator}testuserdir\""
    commandLine executable, '--userdir', userDir, "-J-agentlib:jdwp=transport=dt_socket,suspend=n,server=y,address=${debugPort}"
}

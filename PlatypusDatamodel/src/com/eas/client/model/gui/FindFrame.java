/*
 * FindFrame.java
 *
 * Created on 18 Январь 2009 г., 22:49
 */
package com.eas.client.model.gui;

import com.eas.client.SqlQuery;
import com.eas.client.model.Entity;
import com.eas.client.model.Model;
import com.eas.client.model.gui.view.model.ModelView;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author mg
 * @param <E>
 * @param <M>
 */
public class FindFrame<E extends Entity<?, SqlQuery, E>, M extends Model<E, SqlQuery>> extends javax.swing.JDialog implements DocumentListener {

    private List<ModelView<E, M>.FindResult> found = null;
    private int foundIndex = -1;
    private ModelView<E, M> modelView = null;

    /** Creates new form FindFrame */
    public FindFrame(ModelView<E, M> aModelView) {
        super();
        modelView = aModelView;
        initComponents();
        installDocListener();
        txtFind.requestFocusInWindow();
    }

    public FindFrame(ModelView<E, M> aModelView, JFrame aFrame) {
        super(aFrame);
        modelView = aModelView;
        initComponents();
        installDocListener();
        txtFind.requestFocusInWindow();
    }

    public FindFrame(ModelView<E, M> aModelView, JDialog aDlg) {
        super(aDlg);
        modelView = aModelView;
        initComponents();
        installDocListener();
        txtFind.requestFocusInWindow();
    }

    private void doSearch() {
        ModelView.SearchSubject subjects = ModelView.SearchSubject.FIND_SUBJECT_DATASOURCES;
        if (radioFields.isSelected()) {
            subjects = ModelView.SearchSubject.FIND_SUBJECT_FIELDS;
        }
        if (radioParams.isSelected()) {
            subjects = ModelView.SearchSubject.FIND_SUBJECT_PARAMS;
        }
        found = modelView.findEntitiesFieldsParams(txtFind.getText(), chkMatchCase.isSelected(), chkWholeWords.isSelected(), subjects);
        foundIndex = -1;
    }

    private void installDocListener() {
        txtFind.getDocument().addDocumentListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpSubjects = new javax.swing.ButtonGroup();
        txtFind = new javax.swing.JTextField();
        btnFindNext = new javax.swing.JButton();
        chkWholeWords = new javax.swing.JCheckBox();
        chkMatchCase = new javax.swing.JCheckBox();
        radioDses = new javax.swing.JRadioButton();
        radioFields = new javax.swing.JRadioButton();
        btnClose = new javax.swing.JButton();
        radioParams = new javax.swing.JRadioButton();
        btnFindPrev = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(DatamodelDesignUtils.getLocalizedString("Datamodel_FindDialog_Title")); // NOI18N
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        txtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindActionPerformed(evt);
            }
        });

        btnFindNext.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.btnFindNext.text")); // NOI18N
        btnFindNext.setPreferredSize(new java.awt.Dimension(73, 23));
        btnFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindNextActionPerformed(evt);
            }
        });

        chkWholeWords.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.chkWholeWords.text")); // NOI18N
        chkWholeWords.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkWholeWordsStateChanged(evt);
            }
        });

        chkMatchCase.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.chkMatchCase.text")); // NOI18N
        chkMatchCase.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkMatchCaseStateChanged(evt);
            }
        });

        grpSubjects.add(radioDses);
        radioDses.setSelected(true);
        radioDses.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.radioDses.text")); // NOI18N
        radioDses.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioDsesStateChanged(evt);
            }
        });

        grpSubjects.add(radioFields);
        radioFields.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.radioFields.text")); // NOI18N
        radioFields.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioFieldsStateChanged(evt);
            }
        });

        btnClose.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.btnClose.text")); // NOI18N
        btnClose.setPreferredSize(new java.awt.Dimension(73, 23));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        grpSubjects.add(radioParams);
        radioParams.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.radioParams.text")); // NOI18N
        radioParams.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioParamsStateChanged(evt);
            }
        });

        btnFindPrev.setText(DatamodelDesignUtils.getLocalizedString("FindFrame.btnFindPrev.text")); // NOI18N
        btnFindPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPrevActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioDses)
                            .addComponent(radioParams)
                            .addComponent(radioFields))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkMatchCase)
                            .addComponent(chkWholeWords)))
                    .addComponent(txtFind, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnFindNext, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFindPrev, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindPrev))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioDses)
                    .addComponent(chkWholeWords)
                    .addComponent(btnFindNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioFields)
                    .addComponent(chkMatchCase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioParams, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
    setVisible(false);
    dispose();
}//GEN-LAST:event_btnCloseActionPerformed

private void btnFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindNextActionPerformed
    if (found == null) {
        doSearch();
    }
    showNextFoundLocation();
}//GEN-LAST:event_btnFindNextActionPerformed

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    clearFound();
}//GEN-LAST:event_formWindowClosed

private void radioDsesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioDsesStateChanged
    clearFound();
}//GEN-LAST:event_radioDsesStateChanged

private void radioFieldsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioFieldsStateChanged
    clearFound();
}//GEN-LAST:event_radioFieldsStateChanged

private void radioParamsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioParamsStateChanged
    clearFound();
}//GEN-LAST:event_radioParamsStateChanged

private void chkWholeWordsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkWholeWordsStateChanged
    clearFound();
}//GEN-LAST:event_chkWholeWordsStateChanged

private void chkMatchCaseStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkMatchCaseStateChanged
    clearFound();
}//GEN-LAST:event_chkMatchCaseStateChanged

private void txtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindActionPerformed
    if (found == null) {
        doSearch();
    }
    showNextFoundLocation();
}//GEN-LAST:event_txtFindActionPerformed

private void btnFindPrevActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnFindPrevActionPerformed
{//GEN-HEADEREND:event_btnFindPrevActionPerformed
    if (found == null) {
        doSearch();
    }
    showPrevFoundLocation();
}//GEN-LAST:event_btnFindPrevActionPerformed

private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
//    dispose();    // TODO add your handling code here:
}//GEN-LAST:event_formWindowDeactivated
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnFindNext;
    private javax.swing.JButton btnFindPrev;
    private javax.swing.JCheckBox chkMatchCase;
    private javax.swing.JCheckBox chkWholeWords;
    private javax.swing.ButtonGroup grpSubjects;
    private javax.swing.JRadioButton radioDses;
    private javax.swing.JRadioButton radioFields;
    private javax.swing.JRadioButton radioParams;
    private javax.swing.JTextField txtFind;
    // End of variables declaration//GEN-END:variables

    private void clearFound() {
        found = null;
        foundIndex = -1;
    }

    private void showCurrentFoundLocation() {
        assert found != null : "No search result";
        assert !found.isEmpty() : "Search result is empty";
        assert foundIndex >= 0 : "Wrong found location (less than zero)";
        assert foundIndex < found.size() : "Wrong found location (greater than the search result size)";
        ModelView<E, ?>.FindResult fr = found.get(foundIndex);
        if (fr != null) {
            fr.show();
        }
    }

    private void showNextFoundLocation() {
        if (found != null && !found.isEmpty() && foundIndex < found.size()) {
            if (++foundIndex >= found.size()) {
                foundIndex = 0;
            }
            showCurrentFoundLocation();
        }
    }

    private void showPrevFoundLocation() {
        if (found != null && !found.isEmpty() && foundIndex < found.size()) {
            if (--foundIndex < 0) {
                foundIndex = found.size() - 1;
            }
            showCurrentFoundLocation();
        }
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        clearFound();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        clearFound();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        clearFound();
    }
}
